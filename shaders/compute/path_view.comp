#version 450

layout (set = 0, binding = 0) readonly buffer Paths {
  uint node[];
} paths;

layout (rgba8, set = 0, binding = 1) writeonly uniform image2D image;

layout (set = 1, binding = 0) uniform samplerBuffer overlay;

layout (push_constant) uniform PushConstants {
  uint path_count;
  uint width;
  uint height;
  uint dummy;
  float translation;
  float scaling;
} pc;

layout(local_size_x = 256, local_size_y = 1, local_size_z = 1) in;

uint max_ix = 2048 * 64;

uint clamped(uint ix) {
  return clamp(ix, 0, max_ix);
}

void main() {

  uint path = gl_GlobalInvocationID.y;

  uint ix = (path * 2048) + gl_GlobalInvocationID.x;

  uint leftmost = path * 2048;
  uint rightmost = leftmost + 2047;

  ivec2 pixel = ivec2(gl_GlobalInvocationID.xy);

  int orig_x = pixel.x;

  pixel.x += int(pc.translation);
  float del = 512.0;
  float x_ = float(pixel.x) - del;
  x_ = x_ / pc.scaling;
  x_ += del;
  pixel.x = clamp(int(floor(x_)), 0, 2047);


  if (path < pc.path_count) {
    // read node at this pixel in the path
    int x = pixel.x;

    uint l_ix = x == 0 ? ix : ix - 1;
    uint r_ix = x >= 2047 ? ix : ix + 1;

    uint l_n = paths.node[l_ix];
    uint c_n = paths.node[ix];
    uint r_n = paths.node[r_ix];

    if (c_n == 0) {
      imageStore(image, pixel, vec4(1.0, 1.0, 1.0, 0.0));

    } else {
      int mid = int(c_n) - 1;
      int left = int(l_n) - 1;
      int right = int(r_n) - 1;

      vec4 cm = texelFetch(overlay, mid);
      vec4 cl = cm;
      vec4 cr = cm;

      if (l_n != 0) {
        cl = texelFetch(overlay, left);
      }

      if (r_n != 0) {
        cr = texelFetch(overlay, right);
      }

      // vec4 color = cm;
      // vec4 color = (0.3 * cl) + (0.3 * cr) + (0.5 * cm);
      vec4 color = (0.2 * cl) + (0.2 * cr) + (0.6 * cm);
      // vec4 color = (0.1 * cl) + (0.1 * cr) + (0.8 * cm);

      if (pc.translation < 0.0 && orig_x < pc.translation) {
        int n = int(paths.node[leftmost]);
        color = texelFetch(overlay, n);
      } else if (pc.translation < 0.0 && orig_x >= (2048.0 - pc.translation)) {
        int n = int(paths.node[rightmost]);
        color = texelFetch(overlay, n);
      }

      imageStore(image, pixel, color);
    }

  }
}
